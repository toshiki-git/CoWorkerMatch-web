/* tslint:disable */
/* eslint-disable */
/**
 * CoWorkerMatch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateUserHobbyRequest,
  CreateUserHobbyResponse,
  GetUserHobbyResponseInner,
  UpdateUserHobbyRequest,
  UpdateUserHobbyResponse,
} from '../models/index';
import {
  CreateUserHobbyRequestFromJSON,
  CreateUserHobbyRequestToJSON,
  CreateUserHobbyResponseFromJSON,
  CreateUserHobbyResponseToJSON,
  GetUserHobbyResponseInnerFromJSON,
  GetUserHobbyResponseInnerToJSON,
  UpdateUserHobbyRequestFromJSON,
  UpdateUserHobbyRequestToJSON,
  UpdateUserHobbyResponseFromJSON,
  UpdateUserHobbyResponseToJSON,
} from '../models/index';

export interface UserHobbiesPostRequest {
  createUserHobbyRequest: CreateUserHobbyRequest;
}

export interface UserHobbiesPutRequest {
  updateUserHobbyRequest: UpdateUserHobbyRequest;
}

export interface UserHobbiesUserIdGetRequest {
  userId: string;
}

/**
 *
 */
export class UserHobbiesApi extends runtime.BaseAPI {
  /**
   * Create user new hobbies
   */
  async userHobbiesPostRaw(
    requestParameters: UserHobbiesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateUserHobbyResponse>> {
    if (requestParameters['createUserHobbyRequest'] == null) {
      throw new runtime.RequiredError(
        'createUserHobbyRequest',
        'Required parameter "createUserHobbyRequest" was null or undefined when calling userHobbiesPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/user_hobbies`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserHobbyRequestToJSON(
          requestParameters['createUserHobbyRequest']
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUserHobbyResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create user new hobbies
   */
  async userHobbiesPost(
    requestParameters: UserHobbiesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateUserHobbyResponse> {
    const response = await this.userHobbiesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update user hobbies
   */
  async userHobbiesPutRaw(
    requestParameters: UserHobbiesPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateUserHobbyResponse>> {
    if (requestParameters['updateUserHobbyRequest'] == null) {
      throw new runtime.RequiredError(
        'updateUserHobbyRequest',
        'Required parameter "updateUserHobbyRequest" was null or undefined when calling userHobbiesPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/user_hobbies`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateUserHobbyRequestToJSON(
          requestParameters['updateUserHobbyRequest']
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateUserHobbyResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update user hobbies
   */
  async userHobbiesPut(
    requestParameters: UserHobbiesPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateUserHobbyResponse> {
    const response = await this.userHobbiesPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all hobbies of a user
   */
  async userHobbiesUserIdGetRaw(
    requestParameters: UserHobbiesUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GetUserHobbyResponseInner>>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling userHobbiesUserIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user_hobbies/{user_id}`.replace(
          `{${'user_id'}}`,
          encodeURIComponent(String(requestParameters['userId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetUserHobbyResponseInnerFromJSON)
    );
  }

  /**
   * Get all hobbies of a user
   */
  async userHobbiesUserIdGet(
    requestParameters: UserHobbiesUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GetUserHobbyResponseInner>> {
    const response = await this.userHobbiesUserIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
