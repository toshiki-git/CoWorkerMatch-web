/* tslint:disable */
/* eslint-disable */
/**
 * CoWorkerMatch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateQuestionRequest,
  CreateQuestionResponse,
  Question,
} from '../models/index';
import {
  CreateQuestionRequestFromJSON,
  CreateQuestionRequestToJSON,
  CreateQuestionResponseFromJSON,
  CreateQuestionResponseToJSON,
  QuestionFromJSON,
  QuestionToJSON,
} from '../models/index';

export interface MatchingQuestionsPostRequest {
  createQuestionRequest: CreateQuestionRequest;
}

/**
 *
 */
export class QuestionsApi extends runtime.BaseAPI {
  /**
   * Get user questions
   */
  async matchingQuestionsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Question>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/matching_questions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(QuestionFromJSON)
    );
  }

  /**
   * Get user questions
   */
  async matchingQuestionsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Question>> {
    const response = await this.matchingQuestionsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new matching
   */
  async matchingQuestionsPostRaw(
    requestParameters: MatchingQuestionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateQuestionResponse>> {
    if (requestParameters['createQuestionRequest'] == null) {
      throw new runtime.RequiredError(
        'createQuestionRequest',
        'Required parameter "createQuestionRequest" was null or undefined when calling matchingQuestionsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/matching_questions`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateQuestionRequestToJSON(
          requestParameters['createQuestionRequest']
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateQuestionResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create a new matching
   */
  async matchingQuestionsPost(
    requestParameters: MatchingQuestionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateQuestionResponse> {
    const response = await this.matchingQuestionsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
