/* tslint:disable */
/* eslint-disable */
/**
 * CoWorkerMatch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateHobbyRequest,
  CreateHobbyResponse,
  GetHobbyResponseInner,
} from '../models/index';
import {
  CreateHobbyRequestFromJSON,
  CreateHobbyRequestToJSON,
  CreateHobbyResponseFromJSON,
  CreateHobbyResponseToJSON,
  GetHobbyResponseInnerFromJSON,
  GetHobbyResponseInnerToJSON,
} from '../models/index';

export interface HobbiesPostRequest {
  createHobbyRequest: CreateHobbyRequest;
}

/**
 *
 */
export class HobbiesApi extends runtime.BaseAPI {
  /**
   * Get All hobbies with categories
   */
  async hobbiesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GetHobbyResponseInner>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/hobbies`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetHobbyResponseInnerFromJSON)
    );
  }

  /**
   * Get All hobbies with categories
   */
  async hobbiesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GetHobbyResponseInner>> {
    const response = await this.hobbiesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new hobby
   */
  async hobbiesPostRaw(
    requestParameters: HobbiesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateHobbyResponse>> {
    if (requestParameters['createHobbyRequest'] == null) {
      throw new runtime.RequiredError(
        'createHobbyRequest',
        'Required parameter "createHobbyRequest" was null or undefined when calling hobbiesPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/hobbies`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateHobbyRequestToJSON(requestParameters['createHobbyRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateHobbyResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create a new hobby
   */
  async hobbiesPost(
    requestParameters: HobbiesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateHobbyResponse> {
    const response = await this.hobbiesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
