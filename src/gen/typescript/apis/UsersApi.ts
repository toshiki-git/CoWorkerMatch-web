/* tslint:disable */
/* eslint-disable */
/**
 * CoWorkerMatch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateUserRequest,
  CreateUserResponse,
  GetUserResponse,
  UpdateUserRequest,
  UpdateUserResponse,
} from '../models/index';
import {
  CreateUserRequestFromJSON,
  CreateUserRequestToJSON,
  CreateUserResponseFromJSON,
  CreateUserResponseToJSON,
  GetUserResponseFromJSON,
  GetUserResponseToJSON,
  UpdateUserRequestFromJSON,
  UpdateUserRequestToJSON,
  UpdateUserResponseFromJSON,
  UpdateUserResponseToJSON,
} from '../models/index';

export interface UsersPostRequest {
  createUserRequest: CreateUserRequest;
}

export interface UsersPutRequest {
  updateUserRequest: UpdateUserRequest;
}

export interface UsersUserIdGetRequest {
  userId: string;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
  /**
   * Create a  new user
   */
  async usersPostRaw(
    requestParameters: UsersPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateUserResponse>> {
    if (requestParameters['createUserRequest'] == null) {
      throw new runtime.RequiredError(
        'createUserRequest',
        'Required parameter "createUserRequest" was null or undefined when calling usersPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserRequestToJSON(requestParameters['createUserRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUserResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create a  new user
   */
  async usersPost(
    requestParameters: UsersPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateUserResponse> {
    const response = await this.usersPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update a user
   */
  async usersPutRaw(
    requestParameters: UsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateUserResponse>> {
    if (requestParameters['updateUserRequest'] == null) {
      throw new runtime.RequiredError(
        'updateUserRequest',
        'Required parameter "updateUserRequest" was null or undefined when calling usersPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateUserRequestToJSON(requestParameters['updateUserRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateUserResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update a user
   */
  async usersPut(
    requestParameters: UsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateUserResponse> {
    const response = await this.usersPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a user by ID
   */
  async usersUserIdGetRaw(
    requestParameters: UsersUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetUserResponse>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling usersUserIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{user_id}`.replace(
          `{${'user_id'}}`,
          encodeURIComponent(String(requestParameters['userId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a user by ID
   */
  async usersUserIdGet(
    requestParameters: UsersUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetUserResponse> {
    const response = await this.usersUserIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
